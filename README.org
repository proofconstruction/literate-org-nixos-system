#+PROPERTY: header-args :tangle yes :noweb yes :results silent :mkdirp yes
* Introduction
** About this document
*** Structure
This repository contains configuration for my personal Lenovo X1 Carbon (6th Generation).

I have made some effort to organize it:

=Introduction:= We begin with this introduction, where I explain the structure of this file and how it came about.

=Preliminaries:= Immediately after, we move to the initial setup, with configurations that must exist for /me/ to have a positive experience. *NOTE:* this will be different for you! Be careful!

=NixOS:= Most settings that happen through NixOS modules are under the NixOS top-level header. This includes all hardware configuration and most of the services and programs I rely on.

=X11:= Settings for the graphical environment appear under the X11 header. Here you will find my complete xmonad and xmobar configurations, among other things.

=Applications:= Program-specific settings are here. I tend to use the default settings for most applications, but these ones are the most important and receive special attention.

=Emacs:= I use NixOS, but there's a very real sense in which Emacs is my true operating system. I basically live here. All Emacs-specific packages and settings are here.

=Misc:= Stuff that doesn't have a proper home somewhere else appears here. Currently the only things under Misc are:

1. a list of my elfeed sources,
2. hosts I never want to send or receive traffic with

but I expect to expand this section in the future.

*** Usage
The NixOS and Emacs configurations are generated by org-babel from this ~README.org~ file, allowing me to manage my entire system using the literate programming style.

To generate the config from ~README.org~, open it in Emacs and execute =M-x org-babel-tangle= (or =C-c C-v t=), or execute the following command in a terminal:

#+begin_src sh :tangle no
sudo emacs README.org --batch -f org-babel-tangle
#+end_src

Note: doing this all in one shot requires superuser privileges because Emacs will tangle a few files to protected locations, as well as creating parent directories where necessary.

** Credits
I first learned about the Org-Babel + Nix workflow from [[https://matthewbauer.us/blog/nix-and-org.html][Matthew Bauer's blog post]], but forgot about it until finding [[https://github.com/rasen/dotfiles][rasendubi's configuration]], much of which I have adapted here. I am grateful for the work of both.
* Preliminaries
Here's the stuff I need to do to make sure I can install Nix stuff happily.

** nix-channels
Channels are Nix's stateful Achilles' heel; I hate them and can't wait for Flakes to work, but I have to use them for now.

Here we make sure the preferred channels are set:
1. I use [[https://github.com/nix-community/home-manager][home-manager]] to manage most things at the user-level.
2. My laptop has a QHD screen and needs some additional configuration from [[https://github.com/NixOS/nixos-hardware/][nixos-hardware]].
3. I live in China so I use the [[https://mirrors.tuna.tsinghua.edu.cn/help/nix][Tsinghua University TUNA mirror]].

#+name: nix-channels
#+begin_src nix :tangle /home/alex/.nix-channels :padline no
  https://github.com/nix-community/home-manager/archive/master.tar.gz home-manager
  https://github.com/NixOS/nixos-hardware/archive/master.tar.gz nixos-hardware
  https://mirrors.tuna.tsinghua.edu.cn/nix-channels/nixpkgs-unstable nixpkgs
#+end_src

I need these to be available to the root user also, since I do most system management via ~nixos-rebuild~.

#+begin_src text :tangle /root/.nix-channels :padline no
  <<nix-channels>>
#+end_src

** config pointer
I'm still using the old (pre-Flakes) configuration style of a ~configuration.nix~ file in ~/etc/nixos~, but this is just a pointer to the real config in my ~~/dotfiles~ directory.

#+begin_src nix :tangle /etc/nixos/configuration.nix :padline no
  #
  # This file is auto-generated from "README.org"
  #

  import /home/alex/system/system-config.nix
#+end_src

Of course, we'll also have to generate the real  ~system-config.nix~ file in this directory with all of the actual configs; we do this later.

** nix substituters
Since I'm using a different binary repository (Tsinghua channel), I need to tell Nix to trust it.
#+name: nix-conf
#+begin_src nix :tangle /home/alex/.config/nix/nix.conf
  substituters = https://mirrors.tuna.tsinghua.edu.cn/nix-channels/store https://cache.nixos.org/
#+end_src

The root user also needs this, so nixos-rebuilds actually work.

#+begin_src text :tangle /root/.config/nix/nix.conf
  <<nix-conf>>
#+end_src
** nixpkgs config
We'll generate the nixpkgs config separately for import into both the system-level config and the home-manager config.

All this does is enable nonfree software.
#+name: nixpkgs-config
#+begin_src nix
  nixpkgs = {
    config.allowUnfree = true;
    overlays = [
      (import (fetchTarball https://github.com/nix-community/emacs-overlay/archive/master.tar.gz))
    ];
  };
#+end_src

* NixOS
** General
I use NixOS for several reasons, but largely because I change systems often and got tired of never having quite the same configuration everywhere. Now I can declare everything I care about in a few files and build the same environment wherever I happen to be.

Here I create the skeleton of my config. All the settings that make up the final system definition are referred to using [[https://www.cs.tufts.edu/~nr/noweb/][noweb]] variables, so org-babel knows to tangle in the relevant settings.

The system configuration looks like this:
#+begin_src nix :tangle system-config.nix :noweb no-export
  #
  # This file is auto-generated from "README.org"
  #
  { pkgs, lib, options, ... }:
  {
    imports = [
      # channels defined previously
      <nixos-hardware/lenovo/thinkpad/x1/6th-gen/QHD>
      <home-manager/nixos>
    ];


    ################################################################################
    # Nixpkgs Config                                                               #
    ################################################################################
    <<nixpkgs-config>>

    ################################################################################
    # Settings                                                                     #
    ################################################################################
    <<nixos-section>>

    ################################################################################
    # Services                                                                     #
    ################################################################################
    <<nixos-service>>
  
    # The NixOS release to be compatible with for stateful data such as databases.
    system.stateVersion = "20.09";
  }
#+end_src
** User
I'm the only user on this system.

Here I define my user and groups, my preferred shell, and tell nix that my user can execute ~nixos-rebuild~.

I also tell home-manager to import my home settings from another file.

#+begin_src nix :noweb-ref nixos-section
  users.users.alex = {
    isNormalUser = true;
    uid = 1000;
    createHome = true;
    name = "alex";
    group = "users";
    extraGroups = [
      "wheel" "disk" "audio" "video" "input"
      "systemd-journal"
      "avahi"
      "lxd"
      "adbusers"
      "networkmanager"
    ];
    home = "/home/alex";
    shell = pkgs.zsh;
    initialPassword = "abc123";
  };

  nix.trustedUsers = ["alex"];

  home-manager.users.alex = import ./home.nix;
#+end_src

=initialPassword= is used only upon user creation, once. I change this immediately.

** Home Manager
I use home-manager to handle most of my user-level stuff.

Here I set some default preferences and then a big list of references for other settings.

#+begin_src nix :tangle home.nix :noweb no-export
  { config, pkgs, lib, ... }:

  let

    # preferences
    home = {
      keyboard.layout = "us";
      stateVersion = "20.09";
      sessionVariables = {
        EDITOR = "emacs";
        BROWSER = "firefox";
        LC_CTYPE = "en_US.UTF-8";
        PAGER = "less -R";
      };
    };

    # services
    systemd.user.startServices = true;

    # xdg compat
    xdg.enable = true;

  in {

      ################################################################################
      # nixpkgs                                                                      #
      ################################################################################
      <<nixpkgs-config>>

      ################################################################################
      # Packages                                                                     #
      ################################################################################
      home.packages = with pkgs; [
        <<hm-package>>
      ];

      ################################################################################
      # Programs                                                                     #
      ################################################################################
      <<hm-program>>

      ################################################################################
      # Services                                                                     #
      ################################################################################
      <<hm-service>>

      ################################################################################
      # Settings                                                                     #
      ################################################################################
      <<hm-section>>
  }
#+end_src

*** Dotfiles
  Other stuff I want inside my ~$HOME~.

  #+begin_src nix :noweb-ref hm-section :noweb no-export
    home.file = {
  
      ################################################################################
      # Nix Config
      ################################################################################

      # channels
      ".nix-channels".text = ''
	<<nix-channels>>
      '';

      # substituters
      ".config/nix/nix.conf".text = ''
	<<nix-conf>>
      '';

      ################################################################################
      # UI Configs
      ################################################################################
    
      # xmonad config
      ".xmonad/xmonad.hs".text = ''
	<<xmonad-config>>
      '';
    
      # xmobar config since xmonad isn't handling certain things yet
      ".xmobarrc".text = ''
	<<xmobarrc>>
      '';

      # screen layouts
      ".screenlayout/vert.sh".text = ''
	<<screenlayout-vert>>
      '';

      ".screenlayout/solo.sh".text = ''
	<<screenlayout/solo>>
      '';

      ".screenlayout/projector.sh".text = ''
	<<screenlayout-projector>>
      '';

      ".screenlayout/internal.sh".text = ''
	<<screenlayout-internal>>
      '';

      ".screenlayout/classroom.sh".text = ''
	<<screenlayout-classroom>>
      '';

      ################################################################################
      # Application Configs
      ################################################################################

      # nord dircolors
      ".dir_colors".text = ''
	<<dir_colors>>
      '';

      # terminator config + nord theme
      ".config/terminator/config".text = ''
	<<terminator_conf>>
      '';

      # agda configs
      ".agda/defaults".text = "standard-library";
      ".agda/libraries".text = "/home/alex/.agda/standard-library.agda-lib";
      ".agda/standard-library.agda-lib".text = ''
          name: standard-library
          include: /run/current-system/sw/share/agda
      '';    

    };
  #+end_src
** System
*** High-level
Most of the system- and user-level services and settings are defined here.
**** Emacs
Perhaps the most important service is the Emacs server, which improves frame loading speed dramatically.
#+begin_src nix :noweb-ref hm-service
  services.emacs.enable = true;
#+end_src
**** Shell
I use zsh, with the oh-my-zsh upgrade.

#+begin_src nix :noweb-ref hm-program
  programs.zsh = {
    enable = true;
    enableAutosuggestions = true;
    enableCompletion = true;
    autocd = true;
    defaultKeymap = "emacs";
    dotDir = ".config/zsh";
    history = {
      extended = true;
      share = true;
      };
    oh-my-zsh = {
      enable = true;
      plugins = [ "git" "sudo" ];
      theme = "clean";
    };
  };
#+end_src  

**** Environment Paths
I need to link some paths so things work nicely.

#+begin_src nix :noweb-ref nixos-section
  environment.pathsToLink = [
    "/share/zsh"
    "/share/agda"
  ];
#+end_src
**** Containers
I often use Linux containers with ~lxc~.
#+begin_src nix :noweb-ref nixos-section
  virtualisation.lxd.enable = true;
#+end_src
**** Timezone
I live in China.
#+begin_src nix :noweb-ref nixos-section
  time.timeZone = "Asia/Shanghai";
#+end_src
**** Fonts
  I make all my fonts available system-wide.
  #+begin_src nix :noweb-ref nixos-section
    fonts = {
      fontconfig.enable = true;
      fontDir.enable = true;
      enableGhostscriptFonts = false;

      fonts = with pkgs; [
	inconsolata ubuntu_font_family dejavu_fonts
	iosevka lmodern source-code-pro
	fira fira-code fira-code-symbols fira-mono
	noto-fonts noto-fonts-cjk noto-fonts-emoji
	wqy_microhei wqy_zenhei
	unifont powerline-fonts terminus_font
	libertine
      ];
    };
  #+end_src

**** fwupd
fwupd provides firmware updates, which we usually want.
#+begin_src nix :noweb-ref nixos-service
  services.fwupd.enable = true;
#+end_src

**** direnv + lorri
direnv allows us to define per-directory development environments.
lorri expands on direnv in [[https://www.tweag.io/blog/2019-03-28-introducing-lorri/][several useful ways]].

#+begin_src nix :noweb-ref hm-program
  programs.direnv = {
    enable = true;
    enableZshIntegration = true;
  };
#+end_src

#+begin_src nix :noweb-ref hm-service
  services.lorri.enable = true;
#+end_src

**** redshift
I don't know what I'd do without redshift. Probably get more headaches. It automatically manages the color temperature of your display based on the time and your geographic location.

#+begin_src nix :noweb-ref hm-service
  services.redshift = {
    enable = true;
    latitude = "22.533013";
    longitude = "113.930476";
    temperature = {
      day = 6500;
      night = 3500;
    };
  };
#+end_src

**** unclutter
This automatically hides the mouse cursor on typing or after a set time.

#+begin_src nix :noweb-ref hm-service
  services.unclutter = {
    enable = true;
    extraOptions = [ "exclude-root" "ignore-scrolling" ];
    threshold = 1;
    timeout = 1;
  };
#+end_src

**** GPG-Agent
Manages private keys.

#+begin_src nix :noweb-ref hm-service
  services.gpg-agent = {
    enable = true;
    defaultCacheTtl = 1800;
    enableSshSupport = true;
  };
#+end_src

*** Low-level
All of the system configurations that deal with hardware behavior are here.

Stock NixOS currently uses =hardware-configuration.nix= to isolate kernel modules, initrd, filesystems, power management settings, and any device-specific hardware settings imported from [[https://github.com/NixOS/nixos-hardware][<nixos-hardware>]].

Here I chose to ignore the default warning to not overwrite that file, but you, the reader, probably shouldn't.

This is part of why /you/ can't just clone this repository and build an identical system. Your filesystems have different names! In later builds, mine will too, so I'll have to modify this section appropriately.

In the future, I plan to write a script that will read the =/dev/disk/by-uuid/= info at tangle-time, substituting in the correct values.

**** Boot & Kernel
I use LUKS on LVM, so I include the ~AES~ and ~cryptd~ kernel modules in the initrd to shave milliseconds off my boot time.

#+begin_src nix :noweb-ref nixos-section
  boot = {
    # Wipe /tmp on reboot
    tmpOnTmpfs = true;
    cleanTmpDir = true;
    
    # Use the latest Linux kernel.
    kernelPackages = pkgs.linuxPackages_latest;
  
    # Make virtual machines go fast
    kernelModules = [ "kvm-intel" ];
  
    loader = {
      systemd-boot = {
        enable = true;
        configurationLimit = 128;
        consoleMode = "max";
      };

      # this is an EFI system
      efi.canTouchEfiVariables = true;

      # Don't linger on the NixOS configuration selector screen
      timeout = 1;
    };


    initrd = {
      # These are available at boot
      availableKernelModules = [
        # These aren't strictly necessary but help boot faster.
        "aes_x86_64" "aesni_intel" "cryptd"
        # NVMe, USB, and SD card support
        "xhci_pci" "nvme" "usb_storage"
        "sd_mod" "rtsx_pci_sdmmc"
      ];

      # Need this for LVM snapshots
      kernelModules = [ "dm-snapshot" ];

      # The root partition is LUKS encrypted
      luks.devices = {
        root = {
          device = "/dev/nvme0n1p2";
          preLVM = true;
        };
      };
    };
  };
#+end_src
**** Networking
***** NetworkManager

I use NetworkManager.

Wireguard is still weird on NixOS so I set a probably-dangerous firewall rule.

I also block several hosts that I hate making requests to.

#+begin_src nix :noweb-ref nixos-section
  networking = {
    hostName = "mtop";
    networkmanager.enable = true;

    # not ideal, but wireguard blackholes my traffic otherwise
    firewall.checkReversePath = false;

    # block a lot of crap
    extraHosts = ''
      <<extra-hosts>
    '';

  };
#+end_src

***** SSH
This is a must-have. Sometimes I lay in bed and watch compiles from my phone. Here I start the ssh agent and add the ssh services
#+begin_src nix :noweb-ref nixos-section
  programs.ssh.startAgent = true;
#+end_src

#+begin_src nix :noweb-ref nixos-service
  services.openssh.enable = true;
#+end_src
***** KDEConnect
I use this for sending stuff to and from my phone.
#+begin_src nix :noweb-ref hm-service
  services.kdeconnect.enable = true;
#+end_src

**** Filesystems
These are my partitions.

#+begin_src nix :noweb-ref nixos-section
  fileSystems."/" =
    { device = "/dev/disk/by-uuid/c917e346-d4fd-45ad-affa-98e775c80db5";
      fsType = "ext4";
    };

  fileSystems."/boot" =
    { device = "/dev/disk/by-uuid/D18E-84D1";
      fsType = "vfat";
    };

  swapDevices =
    [ { device = "/dev/disk/by-uuid/0d291eb0-fc86-4e58-bc43-c89140a03e9f"; }
    ];
#+end_src

**** Sound
Pulseaudio is much-hated but Works On My Machine.

#+begin_src nix :noweb-ref nixos-section
  hardware.pulseaudio = {
    enable = true;
    support32Bit = true;
  };
#+end_src

=pavucontrol= is my preferred utility for controlling pulseaudio settings.

#+begin_src nix :noweb-ref hm-package
  pavucontrol
#+end_src

**** Display
This laptop has a QHD display.
#+begin_src nix :noweb-ref nixos-section
  hardware.video.hidpi.enable = lib.mkDefault true;
#+end_src

**** Keyboard
***** Internal
I want my backlight fn-keys to work.
#+begin_src nix :noweb-ref nixos-section
  programs.light.enable = true;
#+end_src

#+begin_src nix :noweb-ref nixos-service
  # Need this for the X1C backlight function keys.
  services.actkbd = {
    enable = true;
    bindings = [
      { keys = [ 224 ]; events = [ "key" ]; command = "/run/current-system/sw/bin/light -U 5"; } # Light -
      { keys = [ 225 ]; events = [ "key" ]; command = "/run/current-system/sw/bin/light -A 5"; } # Light +
    ];
  };
#+end_src
***** External
I use an Ergodox split keyboard, configurable via QMK. Here I set some udev rules to allow flashing it.
#+begin_src nix :noweb-ref nixos-service
  services.udev.extraRules = ''
    # UDEV rul             es for Teensy USB devices
    ATTRS{idVendor}=="16c0", ATTRS{idProduct}=="04[789B]?", ENV{ID_MM_DEVICE_IGNORE}="1"
    ATTRS{idVendor}=="16c0", ATTRS{idProduct}=="04[789A]?", ENV{MTP_NO_PROBE}="1"
    SUBSYSTEMS=="usb", ATTRS{idVendor}=="16c0", ATTRS{idProduct}=="04[789ABCD]?", MODE:="0666"
    KERNEL=="ttyACM*", ATTRS{idVendor}=="16c0", ATTRS{idProduct}=="04[789B]?", MODE:="0666"
  '';
#+end_src

**** Frequency Scaling
I want to throttle the CPU when I'm running on battery power.

#+begin_src nix :noweb-ref nixos-section
  powerManagement.cpuFreqGovernor = lib.mkDefault "powersave";
#+end_src

**** Power Control
I use upower to give power-management control to applications over DBus.

#+begin_src nix :noweb-ref nixos-service
  services.upower.enable = true;
#+end_src

**** Auto-mount disks 
devmon and udisks2 allow for automounting USB storage devices and exposing them over DBus respectively.

#+begin_src nix :noweb-ref nixos-service
  services = {
    devmon.enable = true;
    udisks2.enable = true;
  };
#+end_src

*** Misc
**** ADB
I often use the Android Debug Bridge to manage my phone.

#+begin_src nix :noweb-ref nixos-service
  services.udev.packages = [ pkgs.android-udev-rules ];
#+end_src

#+begin_src nix :noweb-ref nixos-section
  programs.adb.enable = true;
#+end_src

* X11
** General
Top-level xserver configs go here.

#+begin_src nix :noweb-ref nixos-section
  services.xserver = {
    enable = true;
    videoDrivers = [ "intel" ];
    layout = "us";

    # Trackpad scrolling "fix". I don't like the default.
    libinput = {
      enable = true;
      naturalScrolling = true;
    };
  };
#+end_src
** High DPI
Here we set the freetype font DPI and the cursor size for ~.Xresources~, increase the xserver render DPI, and then set a nicer console font.
#+begin_src nix :noweb-ref hm-section
  xresources.properties = {
    "Xft.dpi" = 210;
    "Xcursor.size" = 64;
  };
#+end_src

#+begin_src nix nixos-section
  services.xserver.dpi = 210;
#+end_src

#+begin_src nix :noweb-ref nixos-section
  console.packages = [
    pkgs.terminus_font
  ];
  console.font = "ter-132n";
#+end_src

** Display & Window Management
I use xmonad to manage windows in X11; here are the ~services.xserver~ configs for that, but the actual xmonad configuration is managed by home-manager and appears later in this file.

#+begin_src nix :noweb-ref nixos-section
  services.xserver = {

    desktopManager.xterm.enable = false;
    windowManager.xmonad = {
      enable = true;
      enableContribAndExtras = true;
    };

    displayManager = {
      defaultSession = "none+xmonad";
      autoLogin.enable = true;
      autoLogin.user = "alex";
    };
  };
#+end_src

I use xmobar for a very minimalist status bar, the configuration for which is just below the xmonad config.

#+begin_src nix :noweb-ref hm-package
  xmobar
#+end_src

** Compositing
Window tearing annoys me to no end, and causes headaches. Picom should help, particularly with Firefox.

#+begin_src nix :noweb-ref nixos-service
  services.picom.enable = true;
#+end_src

** xmonad
Here's my full xmonad configuration:
#+name: xmonad-config
#+begin_src haskell :tangle no :noweb no-export
  -- |-----------------------------------------------------------------------------
  -- | Module declaration

  module Main (main) where



  -- |-----------------------------------------------------------------------------
  -- | Imports

  import System.Exit
  import System.IO

  import Data.Monoid
  import Control.Monad
  --import qualified Data.Map as M

  import XMonad
  import XMonad.Config.Desktop

  -- Hooks
  import XMonad.Hooks.DynamicLog
  import XMonad.Hooks.EwmhDesktops
  import XMonad.Hooks.ManageHelpers
  import XMonad.Hooks.ManageDocks
  import XMonad.Hooks.SetWMName
  import XMonad.Hooks.InsertPosition

  -- Actions
  import XMonad.Actions.DynamicProjects
  import XMonad.Actions.UpdatePointer
  import XMonad.Actions.Navigation2D
  import XMonad.Actions.CycleWS

  -- Layouts
  import XMonad.Layout.BinarySpacePartition (emptyBSP)
  import XMonad.Layout.NoBorders
  import XMonad.Layout.ResizableTile (ResizableTall(..))
  import XMonad.Layout.ToggleLayouts (ToggleLayout(..), toggleLayouts)
  import XMonad.Layout.ThreeColumns
  import XMonad.Layout.Grid
  import XMonad.Layout.Circle
  import XMonad.Layout.Fullscreen
  import XMonad.Layout.PerWorkspace
  import XMonad.Layout.Reflect
  import XMonad.Layout.Named
  import XMonad.Layout.IfMax
  import XMonad.Layout.DwmStyle
  import XMonad.Layout.LayoutModifier (ModifiedLayout)


  -- Prompt
  import XMonad.Prompt
  import XMonad.Prompt.ConfirmPrompt
  import XMonad.Prompt.Shell

  -- Utilities
  import XMonad.Util.EZConfig
  import XMonad.Util.Scratchpad
  import XMonad.Util.Font
  import XMonad.Util.SpawnOnce
  import XMonad.Util.Run

  -- StackSet
  import XMonad.StackSet as W



  -- |-----------------------------------------------------------------------------
  -- | MAIN

  main :: IO ()
  main = do
    xmonad
      . docks
      . ewmh
      =<<  myStatusBar (myConfig `additionalKeysP` myKeybindings)



  -- |-----------------------------------------------------------------------------
  -- | CONFIG

  myConfig = def {
    --  Basic stuff
    terminal           = shell,
    focusFollowsMouse  = True,
    modMask            = mod4Mask,

    -- Theming
    normalBorderColor  = myBorderColor,
    focusedBorderColor = myFocusedBorderColor,
    borderWidth        = myBorderWidth,

    -- hooks, layouts
    layoutHook         = myLayoutHook,
    manageHook         = myManageHook,
    handleEventHook    = ewmhDesktopsEventHook,
    logHook            = updatePointer (0.95,0.95) (0,0),
    startupHook        = ewmhDesktopsStartup
                         >> setWMName "XMonad"

                         -- Launch startup programs by alias here
                         >> spawnOnce solo
                         >> spawnOnce cursor
                         >> spawnOnce wallpaper
                         >> spawnOnce notifications
                         >> spawnOnce inputMethod
    }



  -- |-----------------------------------------------------------------------------
  -- | LAYOUT
  -- |
  -- | This layout configuration uses 4 primary layouts: 'ThreeColMid' (suitable
  -- | for ultrawide displays), 'ResizableTall', 'BinarySpacePartition', and 'Grid'.
  -- |
  -- | ThreeColMid and ResizableTall both come with mirrored, reflected variants
  -- | which put the master pane at the bottom of the screen (in ThreeColMid this
  -- | is only true for the 2-window case), suitable for ultrawide displays
  -- | rotated to a portrait orientation.
  -- |
  -- | You can also use the 'M-<Esc>' key binding to toggle
  -- | between the current layout and a fullscreen layout.

  myLayoutHook = smartBorders . avoidStruts $ desktopLayoutModifiers $ toggleLayouts (noBorders Full) myLayouts
    where
      myLayouts =
            tall
        ||| threeColumn
        ||| bsp
        ||| grid

  full = named "Fullscreen"
         $ noBorders (fullscreenFull Full)

  tall = named "Tall"
         $ reflectHoriz
         $ IfMax 1 full
         $ ResizableTall 1 (1/100) (3/5) []

  vertTall = named "VertTall"
             $ Mirror tall

  threeColumn = named "ThreeCol"
                $ reflectHoriz
                $ IfMax 1 full
                $ (ThreeColMid 1 (3/100) (1/2))

  vertThreeColumn = named "VertThreeCol"
                    $ Mirror threeColumn

  bsp = named "Binary"
        $ IfMax 1 full
        $ reflectVert
        $ Mirror emptyBSP

  grid = named "Grid"
         $ reflectVert
         $ Grid



  -- |-----------------------------------------------------------------------------
  -- | PROMPT

  myPrompt :: XPConfig
  myPrompt = def
     { position          = Bottom
     , alwaysHighlight   = True
     , fgColor           = myPromptFgColor
     , bgColor           = myPromptBgColor
     , font              = xmobarFont
     , promptBorderWidth = 0
     , height            = 16
     , defaultText       = " "
     , historySize       = 5
     , maxComplRows      = Just 1
     }



  -- |-----------------------------------------------------------------------------
  -- | SCRATCHPAD

  myScratchpad :: ManageHook
  myScratchpad = scratchpadManageHook (W.RationalRect l t w h)
    where
      h = 0.2 -- height is 20% of the screen height
      w = 1.0 -- scratchpad should be the width of the screen it appears on
      t = 1.0-h -- the top of the scratchpad should be 80% of the way down the screen
      l = 1.0-w -- distance for the left border from the left edge of the screen



  -- |-----------------------------------------------------------------------------
  -- | XMOBAR

  myStatusBar = statusBar "xmobar" myPP strutsToggle
    where
      myPP = def
        { ppCurrent = xmobarColor myCurrentColor ""
        , ppVisible = xmobarColor myVisibleColor ""
        , ppHidden = xmobarColor myHiddenColor ""
        , ppHiddenNoWindows = xmobarColor myEmptyColor ""
        , ppUrgent = xmobarColor myUrgentColor "" . xmobarStrip
        , ppLayout = xmobarColor myLayoutColor ""
        , ppWsSep = "  "
        , ppSep = xmobarColor mySepColor "" "   |   "
        , ppTitle = xmobarColor myTitleColor "" . shorten 120 . trim
        }
      strutsToggle XConfig {modMask = modm} = (modm, xK_b)



  -- |-----------------------------------------------------------------------------
  -- | WINDOW BEHAVIOR
  -- |
  -- | Use the "xprop WM_CLASS" tool to get strings for the className matches.

  myManageHook :: ManageHook
  myManageHook = composeOne
    [ isFullscreen                          -?> doFullFloat
    , isDialog                              -?> doCenterFloat
    , isDialog <&&> className =? "Firefox"  -?> doCenterFloat
    , isInProperty
        "_NET_WM_WINDOW_TYPE"
        "_NET_WM_WINDOW_TYPE_SPLASH"
      -?> doCenterFloat
    , transience
    ]
    <+> manageDocks
    <+> myScratchpad



  -- |-----------------------------------------------------------------------------
  -- | KEYBINDINGS

  myKeybindings :: [(String, X ())]
  myKeybindings =
    [
    -- Layouts
      ("M-<Space>"     , sendMessage NextLayout)
    , ("M-p"           , spawn launcher)
    , ("M-`"           , scratchpadSpawnActionCustom scratchpad)
    , ("M-<Esc>"       , sendMessage (Toggle "Full"))
    , ("M-h"           , sendMessage Expand)
    , ("M-l"           , sendMessage Shrink)

    -- Applications
    , ("M-S-e"         , spawn editor)
    , ("M-S-f"         , spawn browser)
    , ("M-S-<Return>"  , spawn shell)
    , ("M-S-r)"        , spawn riot)

    -- Displays
    , ("M-C-1"         , spawn solo)
    , ("M-C-2"         , spawn double)

    -- Prompt
    , ("M-S-p"         , shellPrompt myPrompt)

    -- Session
    , ("M-S-q"         , confirmPrompt myPrompt "exit" (io exitSuccess))
    , ("M-S-l"         , spawn suspend)
    , ("M-q"           , broadcastMessage ReleaseResources
                         >> restart "xmonad" True)
    ]



  -- |-----------------------------------------------------------------------------
  -- | ALIASES

  cursor :: String
  cursor = "xsetroot -cursor_name left_ptr"

  notifications :: String
  notifications = "dunst"

  inputMethod :: String
  inputMethod = "fcitx"

  editor :: String
  editor = "emacsclient -nc"

  browser :: String
  browser = "firefox"

  launcher :: String
  launcher = "rofi -combi-modi run,drun -show combi -modi combi"

  wallpaper :: String
  wallpaper = "feh --no-fehbg --bg-center '/home/alex/img/wallpapers/dark.png'"

  riot :: String
  riot = "riot-desktop"

  suspend :: String
  suspend = "systemctl suspend"

  shell :: String
  shell = "terminator"

  scratchpad :: String
  scratchpad = "terminator --classname=scratchpad"

  solo :: String
  solo = "~/.screenlayout/bigsolo.sh"

  double :: String
  double = "~/.screenlayout/double.sh"



  -- |-----------------------------------------------------------------------------
  -- | Theme

  -- Font definitions
  fontSize :: String
  fontSize = "12"

  sansSerif :: String
  sansSerif = "xft:Fira Sans:size=" ++ fontSize

  monoSpace :: String
  monoSpace = "xft:Fira Sans Mono:antialias=true:size=" ++ fontSize

  xmobarFontSize :: String
  xmobarFontSize = "12"

  xmobarFont :: String
  xmobarFont = "xft:Fira Sans Mono:antialias=true:size=" ++ xmobarFontSize ++ ":antialias=true"

  -- Color definitions
  myFont                  = xmobarFont
  myPromptBgColor         = "#2e3440" -- nord0
  myPromptFgColor         = "#eceff4" -- nord6
  myBorderColor           = "#40464b" -- dark gray 
  myFocusedBorderColor    = "#839cad" -- light gray
  myCurrentColor          = "#bf616a" -- nord11
  myEmptyColor            = "#4c4c4c" -- dark gray but lighter than xmobar bg 
  myHiddenColor           = "#8fbcbb" -- nord7
  myLayoutColor           = "#5e81ac" -- nord10
  myUrgentColor           = "#bf616a" -- nord11
  myTitleColor            = "#eceff4" -- nord6
  mySepColor              = "#81a1c1" -- nord10
  myVisibleColor          = "#ebcb8b" -- nord13

  -- Window borders
  myBorderWidth = 2

#+end_src
** xmobar
xmonad doesn't handle everything yet, so I have a separate xmobar config:
#+name: xmobarrc
#+begin_src haskell :tangle no :noweb no-export
  Config
     { font =         "xft:Fira Sans Mono:size=8:bold,WenQuanYi Zen Hei:size=8:bold"
     , bgColor =      "#292e39" -- slightly darker than nord0/polar night
     , position =     TopSize L 100 10
     , template = "<fc=#5e81ac>%StdinReader%</fc> }{ <fc=#5e81ac>%date%</fc> | %battery%"
     , allDesktops =      False    -- show on all desktops
     , commands = 
          [ Run Battery        [ "--template" , "<acstatus>"
                               , "--Low"      , "10"        -- units: %
                               , "--High"     , "80"        -- units: %
                               , "--low"      , "#bf616a"
                               , "--normal"   , "#ebcb8b"
                               , "--high"     , "#a3be8c"

                               , "--" -- battery specific options
                                         -- discharging status
                                         , "-o"	, "[<left>]"
                                         -- AC "on" status
                                         , "-O"	, "<fc=#ebcb8b>[<left>+]</fc>"
                                         -- charged status
                                         , "-i"	, "<fc=#a3be8c>[100]</fc>"
                               ] 50

          , Run Date "%a %b %_d %H:%M" "date" 10
          , Run StdinReader
          ]
     }
#+end_src
** Rofi
I use rofi to launch programs. As with everything else, this uses the nord theme colors.
#+begin_src nix :noweb-ref hm-program
  programs.rofi = {
    enable = true;
    cycle = true;
    font = "xft:Fira Sans Mono:antialias=true 16";
    lines = 5;
    scrollbar = false;
    terminal = "\${pkgs.terminator}/bin/terminator";
    width = 15;
    colors = {
      window = {
        background = "#3b4252"; #nord1
        border = "#2e3440"; #nord0
        separator = "#81a1c1"; #nord10 
      };

      rows = {
        normal = {
          background = "#3b4252"; #nord1
          foreground = "#eceff4"; #nord6
          backgroundAlt = "#4c566a"; #nord3 
          highlight = {
            background = "#81a1c1"; #nord9
            foreground = "#d8dee9"; #nord4
          };
        };
      };
    };
  };
#+end_src
** Screen Layouts
Here are the xrandr scripts I use to change screen geometry depending on where I am.
*** Home
**** Office
I have a 4K Dell 27" monitor (usually) in portrait mode on my desk at home. I don't use the internal laptop screen here.
#+name: screenlayout-vert
#+begin_src sh :tangle no :noweb no-export
  #!/bin/sh
  xrandr --output eDP1 --off --output DP1 --primary --mode 3840x2160 --pos 0x0 --rotate left --output DP2 --off --output HDMI1 --off --output HDMI2 --off --output VIRTUAL1 --off
#+end_src

Occasionally I switch to landscape mode to watch stuff. Again, I don't use the laptop's internal display.
#+name: screenlayout-solo
#+begin_src sh :tangle no :noweb no-export
  #!/bin/sh
  xrandr --output eDP1 --off --output DP1 --primary --mode 3840x2160 --pos 0x0 --rotate normal --output DP2 --off --output HDMI1 --off --output HDMI2 --off --output VIRTUAL1 --off
#+end_src
**** Living Room
Sometimes I connect my laptop to the living room projector.
#+name: screenlayout-projector
#+begin_src sh :tangle no :noweb no-export
  #!/bin/sh
  xrandr --output eDP1 --off --output DP1 --off --output DP2 --off --output HDMI1 --mode 1920x1080 --pos 0x0 --rotate normal --output HDMI2 --off --output VIRTUAL1 --off
#+end_src
*** Work
Classroom TVs are all the same.
#+name: screenlayout-classroom
#+begin_src sh :tangle no :noweb no-export
  #!/bin/sh
  xrandr --output eDP1 --primary --mode 2560x1440 --pos 0x1080 --rotate normal --output DP1 --off --output DP2 --off --output HDMI1 --mode 1920x1080 --pos 320x0 --rotate normal --output HDMI2 --off --output VIRTUAL1 --off
#+end_src

I always use my laptop at my desk when I'm home, but at work I generally need to use the internal display.
#+name: screenlayout-internal
#+begin_src sh :tangle no :noweb no-export
  #!/bin/sh
  xrandr --output eDP1 --primary --mode 2560x1440 --pos 0x0 --rotate normal --output DP1 --off --output DP2 --off --output HDMI1 --off --output HDMI2 --off --output VIRTUAL1 --off
#+end_src

* Applications
** Browsers
I use Firefox most of the time.

#+begin_src nix :noweb-ref hm-package
  firefox
#+end_src
** password-store
Here I install [[https://www.passwordstore.org/][password-store]], the best way to manage secrets.

#+begin_src nix :noweb-ref hm-package
  pass
#+end_src

And then I install [[https://github.com/browserpass/browserpass][browserpass]] to bring password-store functionality into Firefox.

#+begin_src nix :noweb-ref hm-program
  programs.browserpass = {
    enable = true;
    browsers = ["firefox"];
  };
#+end_src
** Video Player
VLC started having problems like ten years ago, so now I use smplayer.

#+begin_src nix :noweb-ref hm-package
  smplayer
#+end_src
** Shell
*** dir colors
dircolors makes ~ls~ output appear nicer, and we're always in pursuit of l'esthétique.
#+name: dir_colors
#+begin_src text :tangle no :noweb no-export
  # Copyright (C) 2017-present Arctic Ice Studio <development@arcticicestudio.com>
  # Copyright (C) 2017-present Sven Greb <development@svengreb.de>

  # Project:    Nord dircolors
  # Version:    0.2.0
  # Repository: https://github.com/arcticicestudio/nord-dircolors
  # License:    MIT

  COLOR tty

  TERM ansi
  TERM *color*
  TERM con[0-9]*x[0-9]*
  TERM cons25
  TERM console
  TERM cygwin
  TERM dtterm
  TERM dvtm
  TERM dvtm-256color
  TERM Eterm
  TERM eterm-color
  TERM fbterm
  TERM gnome
  TERM gnome-256color
  TERM hurd
  TERM jfbterm
  TERM konsole
  TERM konsole-256color
  TERM kterm
  TERM linux
  TERM linux-c
  TERM mlterm
  TERM putty
  TERM putty-256color
  TERM rxvt*
  TERM rxvt-unicode
  TERM rxvt-256color
  TERM rxvt-unicode256
  TERM screen*
  TERM screen-256color
  TERM st
  TERM st-256color
  TERM terminator
  TERM tmux*
  TERM tmux-256color
  TERM vt100
  TERM xterm*
  TERM xterm-color
  TERM xterm-88color
  TERM xterm-256color

  ,#+-----------------+
  ,#+ Global Defaults +
  ,#+-----------------+
  NORMAL 00
  RESET 0

  FILE 00
  DIR 01;34
  LINK 36
  MULTIHARDLINK 04;36

  FIFO 04;01;36
  SOCK 04;33
  DOOR 04;01;36
  BLK 01;33
  CHR 33

  ORPHAN 31
  MISSING 01;37;41

  EXEC 01;36

  SETUID 01;04;37
  SETGID 01;04;37
  CAPABILITY 01;37

  STICKY_OTHER_WRITABLE 01;37;44
  OTHER_WRITABLE 01;04;34
  STICKY 04;37;44

  ,#+-------------------+
  ,#+ Extension Pattern +
  ,#+-------------------+
  ,#+--- Archives ---+
  .7z 01;32
  .ace 01;32
  .alz 01;32
  .arc 01;32
  .arj 01;32
  .bz 01;32
  .bz2 01;32
  .cab 01;32
  .cpio 01;32
  .deb 01;32
  .dz 01;32
  .ear 01;32
  .gz 01;32
  .jar 01;32
  .lha 01;32
  .lrz 01;32
  .lz 01;32
  .lz4 01;32
  .lzh 01;32
  .lzma 01;32
  .lzo 01;32
  .rar 01;32
  .rpm 01;32
  .rz 01;32
  .sar 01;32
  .t7z 01;32
  .tar 01;32
  .taz 01;32
  .tbz 01;32
  .tbz2 01;32
  .tgz 01;32
  .tlz 01;32
  .txz 01;32
  .tz 01;32
  .tzo 01;32
  .tzst 01;32
  .war 01;32
  .xz 01;32
  .z 01;32
  .Z 01;32
  .zip 01;32
  .zoo 01;32
  .zst 01;32

  ,#+--- Audio ---+
  .aac 32
  .au 32
  .flac 32
  .m4a 32
  .mid 32
  .midi 32
  .mka 32
  .mp3 32
  .mpa 32
  .mpeg 32
  .mpg 32
  .ogg 32
  .opus 32
  .ra 32
  .wav 32

  ,#+--- Customs ---+
  .3des 01;35
  .aes 01;35
  .gpg 01;35
  .pgp 01;35

  ,#+--- Documents ---+
  .doc 32
  .docx 32
  .dot 32
  .odg 32
  .odp 32
  .ods 32
  .odt 32
  .otg 32
  .otp 32
  .ots 32
  .ott 32
  .pdf 32
  .ppt 32
  .pptx 32
  .xls 32
  .xlsx 32

  ,#+--- Executables ---+
  .app 01;36
  .bat 01;36
  .btm 01;36
  .cmd 01;36
  .com 01;36
  .exe 01;36
  .reg 01;36

  ,#+--- Ignores ---+
  ,*~ 02;37
  .bak 02;37
  .BAK 02;37
  .log 02;37
  .log 02;37
  .old 02;37
  .OLD 02;37
  .orig 02;37
  .ORIG 02;37
  .swo 02;37
  .swp 02;37

  ,#+--- Images ---+
  .bmp 32
  .cgm 32
  .dl 32
  .dvi 32
  .emf 32
  .eps 32
  .gif 32
  .jpeg 32
  .jpg 32
  .JPG 32
  .mng 32
  .pbm 32
  .pcx 32
  .pgm 32
  .png 32
  .PNG 32
  .ppm 32
  .pps 32
  .ppsx 32
  .ps 32
  .svg 32
  .svgz 32
  .tga 32
  .tif 32
  .tiff 32
  .xbm 32
  .xcf 32
  .xpm 32
  .xwd 32
  .xwd 32
  .yuv 32

  ,#+--- Video ---+
  .anx 32
  .asf 32
  .avi 32
  .axv 32
  .flc 32
  .fli 32
  .flv 32
  .gl 32
  .m2v 32
  .m4v 32
  .mkv 32
  .mov 32
  .MOV 32
  .mp4 32
  .mpeg 32
  .mpg 32
  .nuv 32
  .ogm 32
  .ogv 32
  .ogx 32
  .qt 32
  .rm 32
  .rmvb 32
  .swf 32
  .vob 32
  .webm 32
  .wmv 32
#+end_src
*** tmux
 Shell tiling, session saving, etc.

 #+begin_src nix :noweb-ref hm-program
   programs.tmux = {
     enable = true;
     clock24 = true;
     disableConfirmationPrompt = true;
     historyLimit = 1000;
     newSession = true;
     terminal = "screen-256color";
     baseIndex = 1;
     escapeTime = 0;
     extraConfig = ''
       # Default settings
       set -g default-shell /run/current-system/sw/bin/zsh
       set -g default-command 'zsh'
       set -g status on
       set -g mouse on

       bind-key S-left swap-window -t -1
       bind-key S-right swap-window -t +1

       bind h select-pane -L
       bind k select-pane -D
       bind j select-pane -U
       bind l select-pane -R

       set-window-option -g automatic-rename
     '';

     plugins = with pkgs; [
       tmuxPlugins.nord
       tmuxPlugins.copycat
       tmuxPlugins.yank
       tmuxPlugins.sidebar
       tmuxPlugins.sensible
       tmuxPlugins.sessionist
       tmuxPlugins.resurrect
       {
         plugin = tmuxPlugins.continuum;
         extraConfig = ''
           # tmux-continuum settings
           set -g @continuum-restore 'on'
           set -g @continuum-save-interval '30' #save every half hour
         '';
       }
     ];
   };
 #+end_src
*** terminal emulator
 These days I'm using Terminator for my terminal emulation.

 #+begin_src nix :noweb-ref hm-package
   terminator
 #+end_src
**** terminator config
Here's my config for terminator.
#+name: terminator_conf
#+begin_src text :tangle no :noweb no-export 
  [global_config]
    title_inactive_bg_color = "#4C566A"
    title_inactive_fg_color = "#D8DEE9"
    title_receive_bg_color = "#8FBCBB"
    title_receive_fg_color = "#2E3440"
    title_transmit_bg_color = "#88C0D0"
    title_transmit_fg_color = "#2E3440"
  [keybindings]
  [layouts]
    [[default]]
      [[[child1]]]
        parent = window0
        type = Terminal
      [[[window0]]]
        parent = ""
        type = Window
  [plugins]
  [profiles]
    [[default]]
      background_color = "#2e3440"
      cursor_color = "#D8DEE9"
      font = Fira Code weight=450 8
      foreground_color = "#d8dee9"
      icon_bell = False
      palette = "#3b4252:#bf616a:#a3be8c:#ebcb8b:#81a1c1:#b48ead:#88c0d0:#e5e9f0:#4c566a:#bf616a:#a3be8c:#ebcb8b:#81a1c1:#b48ead:#8fbcbb:#eceff4"
      scrollback_lines = 1000
      scrollbar_position = hidden
      show_titlebar = False
      use_system_font = False
      visible_bell = True
#+end_src

** Documents
I use Emacs for almost all of my document work, and that has a separate top-level section in this config. This contains everything else.
*** LaTeX
I use LaTeX to write papers and course notes, so I need the full TeXLive package and some other stuff.

#+begin_src nix :noweb-ref hm-package
  texlive.combined.scheme-full
  imagemagick
  poppler_utils
  pandoc
#+end_src

*** Zathura
[[https://pwmt.org/projects/zathura/][Zathura]] is my pdf viewer of choice.

#+begin_src nix :noweb-ref hm-program
  programs.zathura = {
    enable = true;
    options.incremental-search = true;
  };
#+end_src
*** Office
Unfortunately most of the world lives in Office-land, so I still need compatibility with that, and use LibreOffice to achieve this.

#+begin_src nix :noweb-ref hm-package
  libreoffice
#+end_src
** Graphics
I don't do a ton of stuff with images, but these packages solve most of my needs when I want to.

#+begin_src nix :noweb-ref hm-package
  gimp
  scrot
  feh
#+end_src

** CLI Stuff
Most non-Emacs applications I use are console-based.


#+begin_src nix :noweb-ref hm-package
  # general
  fzf
  ripgrep-all
  translate-shell
  exa
  miniserve
  xclip
  gptfdisk
  tmate
  zip
  unzip
  unrar
  htop
  which
  wget
  curl
  ncdu

  # nix-related stuff
  cachix
  nox
  niv
  nix-index
  nixpkgs-fmt
  nix-prefetch
  nix-prefetch-scripts
  nix-top

  # network
  nmap
  mtr
  tcpdump
  iftop
  termshark
  bind
  wireguard wireguard-tools

#+end_src

** Communications
Here's what I use for talking to people. 

#+begin_src nix :noweb-ref hm-package
  irssi
  element-desktop
#+end_src
** git
Version control. Gotta have it.
#+begin_src nix :noweb-ref hm-package
  # store secrets in git
  git-crypt
#+end_src

#+begin_src nix :noweb-ref hm-program
  programs.git = {
    enable = true;
    package = pkgs.gitAndTools.gitFull;

    userName = "alex";
    userEmail = "alex@proof.construction";

    extraConfig = {
      color.ui = true;
      git.autocrlf = "input";
      tag.forceSignAnnotated = true;
      core.editor = "emacs";
      push.default = "current";
      pull.rebase = true;
      rebase.autostash = true;
    };
  };
#+end_src

Always push to github with ssh keys instead of login/password.

#+begin_src nix :noweb-ref hm-program
  programs.git.extraConfig = {
    url."git@github.com:".pushInsteadOf = "https://github.com";
  };
#+end_src

** man pages
Not having these is aggravating.
#+begin_src nix :noweb-ref nixos-section
  documentation = {
    enable = true;
    dev.enable = true;
    doc.enable = true;
    man.enable = true;
    info.enable = true;
  };
#+end_src

* Emacs
Here are all of the emacs-specific packages and settings.
** General
Everything here is available emacs-wide.
*** Installation
 I install Emacs from the community overlay with home-manager, and I make sure it's built with the packages I use.
 #+begin_src nix :noweb-ref hm-program
   programs.emacs = {
     enable = true;
     package = pkgs.emacsGit;
     extraPackages = (epkgs:
       (with epkgs.melpaPackages; [
         agda2-mode
         aggressive-indent
         beacon
         color-identifiers-mode
         company
         company-box
         counsel
         diminish
         direnv
         dtrt-indent
         elfeed
         expand-region
         haskell-mode
         htmlize
         imenu-list
         ivy
         ivy-pass
         json-mode
         magit
         markdown-mode
         nix-mode
         nord-theme
         org-static-blog
         org-super-agenda
         paren-face
         pass
         slack
         smartparens
         swiper
         use-package
         visual-fill-column
         wgrep
         which-key
         whitespace-cleanup-mode
         yaml-mode
       ]) ++
       (with epkgs.elpaPackages; [
         adaptive-wrap
         org
         tramp
         undo-tree
       ]) ++
       [
         epkgs.orgPackages.org-plus-contrib
       ]
     );
   };
 #+end_src

*** init files
 This file also tangles my Emacs configuration.

 We generate a skeleton ~/home/alex/.emacs.d/init.el~ and fill it in, in the usual way.
 #+begin_src emacs-lisp :tangle /home/alex/.emacs.d/init.el
   ;;
   ;; This file is auto-generated from "README.org"
   ;;

 #+end_src

 We also tangle [[/home/alex/.emacs.d/early-init.el]], since we want to set UI stuff there before frames are rendered.
 #+begin_src emacs-lisp :tangle /home/alex/.emacs.d/early-init.el
   ;;;
   ;;; This file is auto-generated from "README.org"
   ;;;
 #+end_src
*** Memory Management
 Here we suppress garbage collection in the early init, then restore it after init is complete.

 We also increase the data Emacs reads from the process to 1MB.
 #+begin_src emacs-lisp :tangle /home/alex/.emacs.d/early-init.el
   (setq gc-cons-threshold most-positive-fixnum)
   (add-hook 'emacs-startup-hook (defun alex/restore-gc-threshold ()
                                   (setq gc-cons-threshold 100000000)))
 #+end_src
*** use-package
 I love having [[https://github.com/jwiegley/use-package][use-package]] to manage Emacs packages and settings.
 #+begin_src emacs-lisp :tangle /home/alex/.emacs.d/init.el
   ;; Don't ensure packages, they are installed with Nix
   (setq use-package-always-ensure nil)
   (eval-when-compile
     (require 'use-package))
   (require 'bind-key)
   (require 'diminish)
 #+end_src
*** Package Archives
 All emacs packages are installed with Nix, so we disable the Emacs package archives since we don't want to load anything from there.
 #+begin_src emacs-lisp :tangle /home/alex/.emacs.d/early-init.el
   (require 'package)
   (setq package-archives nil)
   (setq package-enable-at-startup t)
 #+end_src
*** Keybindings
 Here I define some useful key mappings.
 #+begin_src emacs-lisp :tangle /home/alex/.emacs.d/init.el
   ;; Change dabbrev-expand to hippie-expand for more functionality
   (global-set-key (kbd "M-/") 'hippie-expand)


   ;; I hate accidentally suspending frames
   (global-unset-key (kbd "C-z"))
   (global-unset-key (kbd "C-x C-z"))
 #+end_src
*** Files
Stop creating backup, autosave, and lock files.
#+begin_src emacs-lisp :tangle /home/alex/.emacs.d/init.el
  ;; Stop creating backup, autosave, and lock files.
  (setq make-backup-files nil
        auto-save-default nil
        create-lockfiles nil)
#+end_src

*** ivy
 #+begin_src emacs-lisp :tangle /home/alex/.emacs.d/init.el :noweb-ref emacs-package
   (use-package ivy
     :demand
     :diminish ivy-mode
     :config
     <<ivy-config>>
     )
 #+end_src

 Do not start input with =^= and ignore the case.
 #+begin_src emacs-lisp :noweb-ref ivy-config :tangle /home/alex/.emacs.d/init.el
   (setq-default ivy-initial-inputs-alist nil)
   (setq-default ivy-re-builders-alist '((t . ivy--regex-ignore-order)))
 #+end_src

 Do not show ~./~ and ~../~ during file name completion.
 #+begin_src emacs-lisp :noweb-ref ivy-config :tangle /home/alex/.emacs.d/init.el
   (setq-default ivy-extra-directories nil)
 #+end_src

 Enable ivy.
 #+begin_src emacs-lisp :noweb-ref ivy-config :tangle /home/alex/.emacs.d/init.el
   (ivy-mode 1)
 #+end_src
*** counsel
 #+begin_src emacs-lisp :tangle /home/alex/.emacs.d/init.el :noweb-ref emacs-package
   (use-package counsel
     :demand
     :diminish counsel-mode
     :config
     ;; reset ivy initial inputs for counsel
     (setq-default ivy-initial-inputs-alist nil)
     (counsel-mode 1))
 #+end_src
*** imenu
This is super handy for jumping to symbols in a buffer (like goto-function).
 #+begin_src emacs-lisp :tangle /home/alex/.emacs.d/init.el :noweb-ref emacs-package
   (use-package imenu-list)
 #+end_src

*** wgrep
sed but better. Edit a grep buffer and transparently apply those changes to the underlying files.
#+begin_src emacs-lisp :tangle /home/alex/.emacs.d/init.el :noweb-ref emacs-package
  (use-package wgrep)
#+end_src
*** whitespace-cleanup
 I highlight unnecessary whitespace and don't want it in my files. This cleans it up on file save. 
 #+begin_src emacs-lisp :tangle /home/alex/.emacs.d/init.el :noweb-ref emacs-package
   (use-package whitespace-cleanup-mode
     :diminish whitespace-cleanup-mode
     :config
     (global-whitespace-cleanup-mode 1))
 #+end_src
*** undo-tree
 It's enabled by default. Just diminish it.
 #+begin_src emacs-lisp :tangle /home/alex/.emacs.d/init.el :noweb-ref emacs-package
   (use-package undo-tree
     :diminish (undo-tree-mode global-undo-tree-mode))
 #+end_src
*** which-key
This helps me figure out what I can do after I enter a prefix.
#+begin_src emacs-lisp :tangle /home/alex/.emacs.d/init.el :noweb-ref emacs-package
  (use-package which-key
    :defer 2
    :diminish which-key-mode
    :config
    (which-key-mode))
#+end_src
*** Scrolling
 =scroll-margin= is a number of lines of margin at the top and bottom of a window.
 Scroll the window whenever point gets within this many lines of the top or bottom of the window.
 #+begin_src emacs-lisp :tangle /home/alex/.emacs.d/init.el
   (setq scroll-margin 3
         scroll-step 1
         scroll-conservatively 5)
 #+end_src
*** yes-or-no-p fix
Use =y/n= to confirm or deny prompts instead of =yes/no=.
#+begin_src emacs-lisp :tangle /home/alex/.emacs.d/init.el
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src
** Applications
Emacs really is an operating system. Here are all the in-emacs applications I use.
*** elfeed
 I read a lot of stuff, so I add my feeds here. I define the list of these feeds later in this document. 

 #+begin_src emacs-lisp :tangle /home/alex/.emacs.d/init.el
   (setq elfeed-feeds
         '(
           <<site-feeds>>
           )
         )
 #+end_src
*** password-store
We use nix to install pass, and here we install the Emacs integration.
#+begin_src emacs-lisp :tangle /home/alex/.emacs.d/init.el :noweb-ref emacs-package
  (use-package ivy-pass
    :commands (ivy-pass))

   (use-package pass
    :commands (pass))
#+end_src
*** eww

** Development
Here are all of the coding-specific settings and packages.
*** direnv & lorri
We use nix to install direnv and lorri, so here we enable the [[https://github.com/wbolster/emacs-direnv][Emacs integration]].
#+begin_src emacs-lisp :tangle /home/alex/.emacs.d/init.el :noweb-ref emacs-package
  (use-package direnv
    :config
    (direnv-mode))
#+end_src

*** color identifiers
Highlight code identifiers uniquely by name.
#+begin_src emacs-lisp :tangle /home/alex/.emacs.d/init.el :noweb-ref emacs-package
  (use-package color-identifiers-mode
    :commands (color-identifiers-mode
               global-color-identifiers-mode)
    :diminish (color-identifiers-mode
               global-color-identifiers-mode))
#+end_src
*** company
Company completes anything.
#+begin_src emacs-lisp :tangle /home/alex/.emacs.d/init.el :noweb-ref emacs-package
  (use-package company
    :defer 2
    :diminish company-mode
    :config
    (setq-default company-dabbrev-downcase nil)
    (setq-default company-search-filtering t)
    (global-company-mode))
#+end_src

*** dtrt-indent
This determines the indentation setting used by source files, making it easier to edit others' code.
#+begin_src emacs-lisp :tangle /home/alex/.emacs.d/init.el :noweb-ref emacs-package
  (use-package dtrt-indent
    :diminish
    :config
    (dtrt-indent-global-mode))
#+end_src
*** electric-pair
This automatically closes syntax pairs, like parentheses.
#+begin_src emacs-lisp :tangle /home/alex/.emacs.d/init.el
  (electric-pair-mode)
#+end_src
*** hippie expand
hippie-expand is amazing.
#+begin_src emacs-lisp :tangle /home/alex/.emacs.d/init.el :noweb-ref emacs-package
  (use-package hippie-exp
    :config
    (setq hippie-expand-try-functions-list
          '(try-expand-dabbrev-visible
            try-expand-dabbrev
            try-expand-dabbrev-all-buffers
            try-complete-file-name-partially
            try-complete-file-name
            try-expand-line
            try-expand-list)))
#+end_src
*** paren-face
This package dims parens (especially useful for lisp)
#+begin_src emacs-lisp :tangle /home/alex/.emacs.d/init.el :noweb-ref emacs-package
  (use-package paren-face
    :config
    (global-paren-face-mode))
#+end_src

*** underscore in words
Allow words to contain an underscore.
#+begin_src emacs-lisp :tangle /home/alex/.emacs.d/init.el
  (add-hook 'prog-mode-hook
            (lambda () (modify-syntax-entry ?_ "w")))
#+end_src
*** magit
 Magit is an amazing emacs git porcelain.
 #+begin_src emacs-lisp :tangle /home/alex/.emacs.d/init.el :noweb-ref emacs-package
   (use-package magit
     :diminish auto-revert-mode
     :config
     <<magit-config>>
     )
 #+end_src

 Don't put deleted files into the system trash.
 #+name: magit-config
 #+begin_src emacs-lisp :tangle /home/alex/.emacs.d/init.el
   (setq-default magit-delete-by-moving-to-trash nil)
 #+end_src

 Enable ivy completion in magit.
 #+name: magit-config
 #+begin_src emacs-lisp :tangle /home/alex/.emacs.d/init.el
   (setq-default magit-completing-read-function 'ivy-completing-read)
 #+end_src
** Interface
*** visual-fill-column
Center all text in the buffer, according to the current major mode.
This is similar to olivetti-mode.
#+begin_src emacs-lisp :tangle /home/alex/.emacs.d/init.el :noweb-ref emacs-package
  (use-package visual-fill-column
    :commands (visual-fill-column-mode)
    :hook
    (markdown-mode . set-visual-fill-column)
    (org-mode . set-visual-fill-column)
    :init
    (defun set-visual-fill-column ()
      (interactive)
      (setq-local fill-column 130) ;; set the column width to 130. This is similar to olivetti mode. 
      (visual-line-mode t)
      (visual-fill-column-mode t))
    :config
    (setq-default visual-fill-column-center-text t
                  visual-fill-column-fringes-outside-margins nil))
#+end_src
*** Fonts
Set the fonts I like to see.
#+begin_src emacs-lisp :tangle /home/alex/.emacs.d/early-init.el
  (defun font-exists-p (font)
    (and (display-graphic-p)
	 (not (null (x-list-fonts font)))))

  (defun set-my-fonts ()
    (cond
     ((font-exists-p "Fira Code")
      (set-face-attribute 'fixed-pitch nil :family "Fira Code Retina" :height 80)
      (set-face-attribute 'default nil :family "Fira Code Retina" :height 80))
     ((font-exists-p "Source Code Pro Regular")
      (set-face-attribute 'fixed-pitch nil :family "Source Code Pro Regular" :height 80)
      (set-face-attribute 'default nil :family "Source Code Pro Regular" :height 80))
     ((font-exists-p "Inconsolata Regular")
      (set-face-attribute 'fixed-pitch nil :family "Inconsolata Regular" :height 160)
      (set-face-attribute 'default nil :family "Inconsolata Regular" :height 160))))

  (set-my-fonts)
#+end_src

Apply these font settings whenever a new frame is created, since I try to always use emacs in daemon mode.
#+begin_src emacs-lisp :tangle /home/alex/.emacs.d/early-init.el
  (defun font-hook (frame)
    (select-frame frame)
    (set-my-fonts))

  (add-hook 'after-make-frame-functions #'font-hook)
#+end_src
*** De-clutter
Hide menu, toolbar, scrollbar. (Goes to early-init to avoid flash of unstyled emacs.)
#+begin_src emacs-lisp :tangle /home/alex/.emacs.d/early-init.el
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src

Disable startup stuff.
#+begin_src emacs-lisp :tangle /home/alex/.emacs.d/init.el
  (setq inhibit-startup-message t
        inhibit-startup-echo-area-message (user-login-name)
        inhibit-startup-buffer-menu t
        inhibit-startup-screen t)
#+end_src

Don't blink the cursor.
#+begin_src emacs-lisp :tangle /home/alex/.emacs.d/init.el
  (blink-cursor-mode -1)
#+end_src

*** Color theme
I use the [[https://github.com/arcticicestudio/nord-emacs][nord]] theme. I put this in early-init to avoid seeing emacs without any styling. For some reason this doesn't currently work automatically and I need to manually ~M-x load-theme~.
#+begin_src emacs-lisp :tangle /home/alex/.emacs.d/early-init.el
  (require 'nord-theme)
  (load-theme 'nord t)
#+end_src

*** Highlight current line
 Highlight the current line.
 #+begin_src emacs-lisp :tangle /home/alex/.emacs.d/init.el
   (global-hl-line-mode)

   ;; This allows us to disable hl-line-mode per-buffer, since
   ;; global-hl-line-mode will be on everywhere otherwise
   (make-variable-buffer-local 'global-hl-line-mode)
   (defun disable-hl-line-mode ()
     (interactive)
     (setq global-hl-line-mode nil))
 #+end_src
*** beacon-mode
Highlight the cursor when scrolling or jumping point.
#+begin_src emacs-lisp :tangle /home/alex/.emacs.d/init.el :noweb-ref emacs-package
  (use-package beacon
    :diminish beacon-mode
    :config
    (beacon-mode 1))
#+end_src
*** modeline
Display current time and battery level in modeline. Nice for long sessions (always) and laptop use.
#+begin_src emacs-lisp :tangle /home/alex/.emacs.d/init.el :noweb-ref emacs-package
  (use-package time
    :config
    (setq display-time-default-load-average nil)
    (setq display-time-24hr-format t)
    (display-time-mode 1))

  (use-package battery
    :config
    (display-battery-mode 1))
#+end_src

Show the line and column number.
#+begin_src emacs-lisp :tangle /home/alex/.emacs.d/init.el
  (column-number-mode 1)
  (line-number-mode 1)
#+end_src

*** Misc
Draw the cursor as wide as the glyph under it.
#+begin_src emacs-lisp :tangle /home/alex/.emacs.d/init.el
  (setq-default x-stretch-cursor t)
#+end_src

Highlight matching parentheses.
#+begin_src emacs-lisp :tangle /home/alex/.emacs.d/init.el
  (show-paren-mode 1)
#+end_src

Add the full filepath to the titlebar, instead of just the filename.
#+begin_src emacs-lisp :tangle /home/alex/.emacs.d/init.el
  (setq frame-title-format
        '((:eval (if (buffer-file-name)
         (abbreviate-file-name (buffer-file-name))
         "%b"))))
#+end_src
** Languages
Here are the languages I use emacs to write, and their language-mode settings.
*** elisp
#+begin_src emacs-lisp :tangle /home/alex/.emacs.d/init.el :noweb-ref emacs-package
  (use-package elisp-mode
    :ensure nil ; built-in
    :config
    <<elisp-mode-config>>
    )
#+end_src

**** aggressive indent
Keep lisp code always indented.
#+begin_src emacs-lisp :tangle /home/alex/.emacs.d/init.el :noweb-ref emacs-package
  (use-package aggressive-indent
    :commands (aggressive-indent-mode aggressive-indent-global-mode)
    :hook
    (emacs-lisp-mode . aggressive-indent-mode))
#+end_src
*** nix
Hard to not have this on NixOS.
#+begin_src emacs-lisp :tangle /home/alex/.emacs.d/init.el :noweb-ref emacs-package
  (use-package nix-mode
    :mode "\\.nix$")
#+end_src
*** haskell
I'm an xmonad user and sometimes also write other stuff.
#+begin_src emacs-lisp :tangle /home/alex/.emacs.d/init.el :noweb-ref emacs-package
  (use-package haskell-mode
    :mode "\\.hs$"
    )
#+end_src

*** agda
I'm using the proofconstruction handle, after all.
#+begin_src emacs-lisp :tangle /home/alex/.emacs.d/init.el :noweb-ref emacs-package
  (use-package agda-mode
    :mode "\\.agda$")
#+end_src
*** json
nix-mode complains if you don't have this, and json is ubiquitous by now.
#+begin_src emacs-lisp :tangle /home/alex/.emacs.d/init.el :noweb-ref emacs-package
  (use-package json-mode
    :mode "\\.json$")
#+end_src
*** yaml
Rarely needed but still useful.
#+begin_src emacs-lisp :tangle /home/alex/.emacs.d/init.el :noweb-ref emacs-package
  (use-package yaml-mode
    :mode ("\\.\\(yml\\|yaml\\)$" . yaml-mode))
#+end_src
*** markdown
I mostly use org-mode for markdown but sometimes I need to edit stuff from other people.
#+begin_src emacs-lisp :tangle /home/alex/.emacs.d/init.el :noweb-ref emacs-package
  (use-package markdown-mode
    :mode ("\\.\\(markdown\\|mdown\\|md\\)$" . markdown-mode)
    :init
    (add-hook 'markdown-mode-hook 'visual-line-mode)
    (add-hook 'markdown-mode-hook 'flyspell-mode)
    :config
    (setq markdown-fontify-code-blocks-natively t))
#+end_src

Package edit-indirect needed to edit code blocks.
#+begin_src emacs-lisp :tangle /home/alex/.emacs.d/init.el :noweb-ref emacs-package
  (use-package edit-indirect
    :after markdown-mode)
#+end_src

**** Markdown cliplink
(Uses org-cliplink.)

#+begin_src emacs-lisp :tangle /home/alex/.emacs.d/init.el
  (defun alex/md-link-transformer (url title)
    (if title
        (format "[%s](%s)"
                (org-cliplink-elide-string
                 (org-cliplink-escape-html4
                  (org-cliplink-title-for-url url title))
                 org-cliplink-max-length)
                url)
      (format "<%s>" url)))

  (defun alex/md-cliplink ()
    "Takes a URL from the clipboard and inserts an markdown-mode link
  with the title of a page found by the URL into the current
  buffer"
    (interactive)
    (org-cliplink-insert-transformed-title (org-cliplink-clipboard-content)
                                           #'alex/md-link-transformer))
#+end_src
** Org-mode
I make a few changes to the default settings org-mode comes with.
*** General
 #+begin_src emacs-lisp :tangle /home/alex/.emacs.d/init.el :noweb-ref emacs-package
   (use-package org
     :mode ("\\.org$" . org-mode)
     :init
     <<org-init>>
     :config
     <<org-config>>
     )
 #+end_src

 I want header ~:tags:~ to appear right after header text.
 #+begin_src emacs-lisp :noweb-ref org-config
   (setq org-tags-column 0)
 #+end_src

 I want to see the highest-level overview when I open org files.
 #+begin_src emacs-lisp :noweb-ref org-config
   (setq org-startup-folded t)
 #+end_src

 Keep org-table headers visible.
 #+begin_src emacs-lisp :noweb-ref org-config
   (setq org-table-header-line-p t)
 #+end_src

 I generally don't want to see the org-markup.
 #+begin_src emacs-lisp :noweb-ref org-config
   (setq org-hide-emphasis-markers t)
 #+end_src

 I generally keep my org files here.
 #+begin_src emacs-lisp :noweb-ref org-config
   (setq alex/org-directory "~/org")
 #+end_src
*** adaptive-wrap
 This makes line-wrapping much better.
 #+begin_src emacs-lisp :tangle /home/alex/.emacs.d/init.el :noweb-ref emacs-package
   (use-package adaptive-wrap
     :config
     (add-hook 'org-mode-hook #'adaptive-wrap-prefix-mode))
 #+end_src
*** org-babel
 Apply syntax hightlighting in org-babel blocks.
 #+begin_src emacs-lisp :noweb-ref org-config
   (setq org-src-fontify-natively t)
 #+end_src

*** org-crypt
 Some org files should have encrypted entries. (student grading info, etc)
 #+begin_src emacs-lisp :noweb-ref org-config
   (require 'org-crypt)
   (org-crypt-use-before-save-magic)
   (add-to-list 'org-tags-exclude-from-inheritance "crypt")
   (setq org-crypt-key "alex@proof.construction")
   (add-hook 'org-babel-pre-tangle-hook 'org-decrypt-entries t)
 #+end_src
*** Image previews
 #+begin_src emacs-lisp :noweb-ref org-config
   ;; Images embedded in org docs should be scaled to fit the document width
   (setq org-image-actual-width '(1024))

   ;; Embedded images should always be available
   (setq org-startup-with-inline-images t)
 #+end_src
*** Latex previewing
 #+begin_src emacs-lisp :noweb-ref org-config
   (setq org-latex-packages-alist
         '(("" "tikz-cd" t))) ;; I make a lot of commutative diagrams

   ;; All of the LaTeX previews should go into a cache dir
   (setq org-preview-latex-image-directory (expand-file-name "cache/latex-images/" user-emacs-directory))

   ;; dvipng doesn't work with tikz, so we use imagemagick
   (setq org-preview-latex-default-process 'imagemagick)

   ;; LaTeX preview should be always-on
   (setq org-startup-with-latex-preview t)
 #+end_src
* Misc
** Web Feeds
A list of all the website feeds I read. I try to keep this updated.

#+name: site-feeds
#+begin_src emacs-lisp
  ;; Haskell
  "https://reasonablypolymorphic.com/blog/archives/"
  "https://chrispenner.ca/atom.xml"
  "https://www.stephendiehl.com/feed.rss"

  ;; Teaching
  "https://cestlaz.github.io/rss.xml" ;; CS

  ;; General Tech
  "https://brettgilio.com/rss.xml" ;; GNU Project webmaster
  "https://explog.in/rss.xml" ;; Kunal Bhalla
  "https://www.mycpu.org/posts/" ;; Yet another technical blog
  "https://batsov.com/atom.xml" ;; Rubocop Creator (personal)
  "https://metaredux.com/feed.xml" ;; Rubocop Creator (OSS)
#+end_src

** Blocked hosts
Here's a list of hosts I want to block traffic to.

#+name: extra-hosts
#+begin_src nix
  127.0.0.1 *.google.com
  127.0.0.1 *.googleapis.com
  127.0.0.1 ajax.googleapis.com
  127.0.0.1 google-analytics.com
  127.0.0.1 *.facebook.com
  127.0.0.1 *.linkedin.com
  127.0.0.1 t.co
  127.0.0.1 *.twitter.com
  127.0.0.1 *.doubleclick.net
  127.0.0.1 *.myfonts.net
  127.0.0.1 *.quora.com
#+end_src
